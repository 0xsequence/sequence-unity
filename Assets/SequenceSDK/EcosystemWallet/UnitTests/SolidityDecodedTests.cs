using System;
using System.Numerics;
using System.Text;
using NUnit.Framework;
using Sequence.EcosystemWallet.Primitives;
using Sequence.Utils;
using UnityEngine;

namespace Sequence.EcosystemWallet.UnitTests
{
    public class SolidityDecodedTests
    {
        [Test]
        public void FromSolidityEncodingTest()
        {
            string payload =
                "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f55c9e86f01f5a5aa380014a3f49c4db9064952f00000000000000000000000000000000000000d1d2690a6b27a40f8b1a200a0300000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000172d01620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000030b90ec7e2ae5308ee069131601af8ec53f609ec037cbad144d54bd191ef8770aaf57a8c1afa694348fd1d387e60841bf70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            SolidityDecoded expected = new SolidityDecoded(SolidityDecoded.Kind.Transaction, false,
                new[]
                {
                    new Call(new Address("0xf55c9e86f01f5a5aa380014a3f49c4db9064952f"),
                        BigInteger.Parse("16623804803955111427283380865539"),
                        "0xb90ec7e2ae5308ee069131601af8ec53f609ec037cbad144d54bd191ef8770aaf57a8c1afa694348fd1d387e60841bf7"
                            .HexStringToByteArray(),
                        BigInteger.Parse("388825442"), false, false, BehaviourOnError.abort)
                }, BigInteger.Parse("0"), BigInteger.Parse("0"),
                "0x",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                new Address[] { });

            SolidityDecoded decoded = SolidityDecoded.FromSolidityEncoding(payload);
            
            AssertEqualSolidityDecodings(expected, decoded);
        }
        
        private void AssertEqualSolidityDecodings(SolidityDecoded expected, SolidityDecoded decoded)
        {
            Assert.AreEqual(expected.kind, decoded.kind);
            Assert.AreEqual(expected.noChainId, decoded.noChainId);
            Assert.AreEqual(expected.space, decoded.space);
            Assert.AreEqual(expected.nonce, decoded.nonce);
            Assert.AreEqual(expected.message, decoded.message);
            Assert.AreEqual(expected.imageHash, decoded.imageHash);
            Assert.AreEqual(expected.digest, decoded.digest);
            Assert.AreEqual(expected.parentWallets.Length, decoded.parentWallets.Length);
            Assert.AreEqual(expected.calls.Length, decoded.calls.Length);
            for (int i = 0; i < expected.calls.Length; i++)
            {
                Assert.AreEqual(expected.calls[i].to, decoded.calls[i].to);
                Assert.AreEqual(expected.calls[i].value, decoded.calls[i].value);
                Assert.AreEqual(expected.calls[i].data, decoded.calls[i].data);
                Assert.AreEqual(expected.calls[i].gasLimit, decoded.calls[i].gasLimit);
                Assert.AreEqual(expected.calls[i].delegateCall, decoded.calls[i].delegateCall);
                Assert.AreEqual(expected.calls[i].onlyFallback, decoded.calls[i].onlyFallback);
                Assert.AreEqual(expected.calls[i].behaviorOnError, decoded.calls[i].behaviorOnError);
            }
            for (int i = 0; i < expected.parentWallets.Length; i++)
            {
                Assert.AreEqual(expected.parentWallets[i], decoded.parentWallets[i]);
            }
        }
        
        [Test]
        public void FromSolidityEncodingTest2()
        {
            string payload =
                "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000021589773bd16cd380232a41fd49369977d1db0c400000000000000000000000000000000000001ebfe5bea7ea9dc560f328fa0b700000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000275c6181000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000005dda4f4f63adb99c80f292a7e827528c75cbdc3db03f79d91bff1e69217a68d70d5f1ac83a88c88bc880c5cfb644d16b47ea62a82ad06d60e7de17b94c75ee7c0a5357ffba964004787d1eaef010bad9051d1891f60984f84c9780de324a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            SolidityDecoded expected = new SolidityDecoded(SolidityDecoded.Kind.Transaction, false,
                new[]
                {
                    new Call(new Address("0x21589773bd16cd380232a41fd49369977d1db0c4"),
                        BigInteger.Parse("38979748106618282834436014710967"),
                        "0xda4f4f63adb99c80f292a7e827528c75cbdc3db03f79d91bff1e69217a68d70d5f1ac83a88c88bc880c5cfb644d16b47ea62a82ad06d60e7de17b94c75ee7c0a5357ffba964004787d1eaef010bad9051d1891f60984f84c9780de324a"
                            .HexStringToByteArray(),
                        BigInteger.Parse("660365697"), false, false, BehaviourOnError.abort)
                }, BigInteger.Parse("0"), BigInteger.Parse("0"),
                "0x",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                new Address[] { });
            
            SolidityDecoded decoded = SolidityDecoded.FromSolidityEncoding(payload);
            
            AssertEqualSolidityDecodings(expected, decoded);
        }

        [Test]
        public void FromSolidityEncodingTest3()
        {
            string payload =
                "0xa0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f000000000000000000000000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000000e0000031b91f19ca38dc8ebbf91db23bfcc6644095e20cd92de776fad23100abcf0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020565d6c6751f7da3a2225f0577a2fc7d4e04d4807e8e2860dfcbc7d20fbbaf80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            SolidityDecoded expected = new SolidityDecoded(SolidityDecoded.Kind.Transaction, false,
                new[]
                {
                    new Call(new Address("0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f"),
                        BigInteger.Parse("27"),
                        "0x565d6c6751f7da3a2225f0577a2fc7d4e04d4807e8e2860dfcbc7d20fbbaf800"
                            .HexStringToByteArray(),
                        BigInteger.Parse("343176436416564113169670386691375668074847034592115607773457142857640911"), false, true, BehaviourOnError.revert)
                }, BigInteger.Parse("0"), BigInteger.Parse("0"),
                "0x",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                new Address[] { });
            
            SolidityDecoded decoded = SolidityDecoded.FromSolidityEncoding(payload);
            
            AssertEqualSolidityDecodings(expected, decoded);
        }
        
        [Test]
        public void FromSolidityEncodingTest_MultipleCalls()
        {
            string payload =
                "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000005b392c6bf000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000073bd16cd380232a41fd49369977d1db0c4deb215000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000003b9ac9ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000463adb99c000000000000000000000000000000000000000000000000000000000000000000000000000000003f79d91bff1e69217a68d70d5f1ac83a88c88bc8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000003b9ac9fe0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042de17b94c75ee7c0a5357ffba964004787d1eaef010bad9051d1891f60984f84c9780de324a73724b5cb73b4b179d021d5880fd1a0b2daf93dc7378cb03d9a91e1a0c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            SolidityDecoded expected = new SolidityDecoded(SolidityDecoded.Kind.Transaction, false,
                new[]
                {
                    new Call(new Address("0x73bd16cd380232a41fd49369977d1db0c4deb215"),
                        BigInteger.Parse("0"),
                        "0x63adb99c"
                            .HexStringToByteArray(),
                        BigInteger.Parse("999999999"), false, false, BehaviourOnError.abort),
                    new Call(new Address("0x3f79d91bff1e69217a68d70d5f1ac83a88c88bc8"), BigInteger.Parse("0"),
                        "0xde17b94c75ee7c0a5357ffba964004787d1eaef010bad9051d1891f60984f84c9780de324a73724b5cb73b4b179d021d5880fd1a0b2daf93dc7378cb03d9a91e1a0c"
                            .HexStringToByteArray(), BigInteger.Parse("999999998"), false, true,
                        BehaviourOnError.ignore),
                }, BigInteger.Parse("105"), BigInteger.Parse("24487577279"),
                "0x",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                new Address[] { });
            
            SolidityDecoded decoded = SolidityDecoded.FromSolidityEncoding(payload);
            
            AssertEqualSolidityDecodings(expected, decoded);
        }
        
        [Test]
        public void FromSolidityEncodingTest_NoCallsManyParents()
        {
            string payload =
                "0xdc000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000a18ca8a583302424783709548800000000000000000000000000000000000000000000000000000000000039740000000000000000000000000000000000000000000000000000000000000265000000000000000000000000000000000000000000000000000000000000103a0000000000000000000000000000000000000000000000000000000000001c43000000000000000000000000000000000000000000000000000000000000166e00000000000000000000000000000000000000000000000000000000000007a90000000000000000000000000000000000000000000000000000000000002040000000000000000000000000000000000000000000000000000000000000049a0000000000000000000000000000000000000000000000000000000000000584000000000000000000000000000000000000000000000000000000000000038c0000000000000000000000000000000000000000000000000000000000000023000000000000000000000000000000000000000000000000000000000000023200000000000000000000000000000000000000000000000000000000000032cd00000000000000000000000000000000000000000000000000000000000014ac0000000000000000000000000000000000000000000000000000000000000e8f0000000000000000000000000000000000000000000000000000000008a5f6af00000000000000000000000000000000000000000000000000000000000023f40000000000000000000000000000000000000000000000000000000071aad10d00000000000000000000000000000000000000000000000000000000000039640000000000000000000000000000000000000000000000000000000000001a37000000000000000000000000000000000000000000000000000000000000077d";
            SolidityDecoded expected = new SolidityDecoded(SolidityDecoded.Kind.Message, false,
                new Call[] { }, BigInteger.Parse("0"), BigInteger.Parse("0"),
                "0x00000000000000000000000000000000000000000000000000000000000001dc",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                new Address[]
                {
                    new Address("0x00000000000000a18ca8a5833024247837095488"),
                    new Address("0x0000000000000000000000000000000000003974"),
                    new Address("0x0000000000000000000000000000000000000265"),
                    new Address("0x000000000000000000000000000000000000103a"),
                    new Address("0x0000000000000000000000000000000000001c43"),
                    new Address("0x000000000000000000000000000000000000166e"),
                    new Address("0x00000000000000000000000000000000000007a9"),
                    new Address("0x0000000000000000000000000000000000002040"),
                    new Address("0x000000000000000000000000000000000000049a"),
                    new Address("0x0000000000000000000000000000000000000584"),
                    new Address("0x000000000000000000000000000000000000038c"),
                    new Address("0x0000000000000000000000000000000000000023"),
                    new Address("0x0000000000000000000000000000000000000232"),
                    new Address("0x00000000000000000000000000000000000032cd"),
                    new Address("0x00000000000000000000000000000000000014ac"),
                    new Address("0x0000000000000000000000000000000000000e8f"),
                    new Address("0x0000000000000000000000000000000008a5f6af"),
                    new Address("0x00000000000000000000000000000000000023f4"),
                    new Address("0x0000000000000000000000000000000071aad10d"),
                    new Address("0x0000000000000000000000000000000000003964"),
                    new Address("0x0000000000000000000000000000000000001a37"),
                    new Address("0x000000000000000000000000000000000000077d")
                });
            
            SolidityDecoded decoded = SolidityDecoded.FromSolidityEncoding(payload);
            
            AssertEqualSolidityDecodings(expected, decoded);
        }
    }
}